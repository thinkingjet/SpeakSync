import React, { useState } from 'react';
import { 
  Box, 
  Typography,
  Button,
  Chip,
  IconButton,
  Tooltip,
  Snackbar,
  Alert
} from '@mui/material';
import AssignmentIcon from '@mui/icons-material/Assignment';
import AutorenewIcon from '@mui/icons-material/Autorenew';
import DoneIcon from '@mui/icons-material/Done';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import ShareIcon from '@mui/icons-material/Share';
import DownloadIcon from '@mui/icons-material/Download';
import ReactMarkdown from 'react-markdown';

/**
 * Component to display and manage meeting notes
 */
function MeetingNotesPanel({ 
  meetingNotes, 
  meetingNotesTimestamp, 
  meetingNotesGenInfo, 
  isGeneratingNotes,
  generateMeetingNotes,
  room,
  roomUsers
}) {
  // Add state for feedback
  const [isExporting, setIsExporting] = useState(false);
  const [showSuccessAlert, setShowSuccessAlert] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');

  // Function to copy meeting notes to clipboard
  const copyToClipboard = () => {
    if (meetingNotes) {
      navigator.clipboard.writeText(meetingNotes)
        .then(() => {
          // Show success notification
          setSuccessMessage('Meeting notes copied to clipboard');
          setShowSuccessAlert(true);
          console.log('Meeting notes copied to clipboard');
        })
        .catch(err => {
          console.error('Failed to copy meeting notes:', err);
        });
    }
  };

  // Function to export meeting notes as Markdown file
  const exportAsMarkdown = () => {
    if (meetingNotes) {
      setIsExporting(true);
      
      // Format date for the header
      const formattedDate = meetingNotesTimestamp 
        ? meetingNotesTimestamp.toLocaleDateString() + ' ' + meetingNotesTimestamp.toLocaleTimeString()
        : new Date().toLocaleDateString() + ' ' + new Date().toLocaleTimeString();
      
      // Create metadata header
      const metadata = [
        `# Meeting Notes: ${room || 'Untitled Room'}`,
        `**Date:** ${formattedDate}`,
        '',
      ];
      
      // Add participants info if available
      if (roomUsers && roomUsers.length > 0) {
        metadata.push('**Participants:**');
        roomUsers.forEach(user => {
          metadata.push(`- ${user.username}${user.language ? ` (${user.language})` : ''}`);
        });
        metadata.push('');
      }
      
      // Add generation method (auto or manual)
      if (meetingNotesGenInfo) {
        const generationType = meetingNotesGenInfo.isAuto ? 'Automatically generated' : 'Manually generated';
        metadata.push(`**Generation Type:** ${generationType}`);
        
        // Add who generated it if it was manual
        if (!meetingNotesGenInfo.isAuto && meetingNotesGenInfo.username) {
          metadata.push(`**Generated by:** ${meetingNotesGenInfo.username}`);
        }
        
        // Add translation info
        if (meetingNotesGenInfo.isTranslated) {
          metadata.push('**Note:** This content has been translated from the original language.');
        }
        metadata.push('');
      }
      
      metadata.push('---', '');  // Add a separator line
      
      // Combine metadata with original meeting notes
      const fullContent = metadata.join('\n') + meetingNotes;
      
      // Create a blob with the Markdown content
      const blob = new Blob([fullContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      
      // Create a temporary link element and trigger download
      const link = document.createElement('a');
      link.href = url;
      
      // Create file name with timestamp
      const timestamp = meetingNotesTimestamp 
        ? meetingNotesTimestamp.toISOString().replace(/[:.]/g, '-') 
        : new Date().toISOString().replace(/[:.]/g, '-');
      
      // Include room name in file name if available
      const roomSlug = room ? room.toLowerCase().replace(/\s+/g, '-') : 'meeting';
      link.download = `${roomSlug}-notes-${timestamp}.md`;
      
      // Append to the document, click and then clean up
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      // Set success message and show alert
      setSuccessMessage('Meeting notes exported as Markdown file');
      setShowSuccessAlert(true);
      
      console.log('Meeting notes exported as Markdown file');
      
      // Reset the exporting state
      setIsExporting(false);
    }
  };

  // Function to handle closing the success alert
  const handleCloseAlert = () => {
    setShowSuccessAlert(false);
  };

  return (
    <Box 
      sx={{ 
        display: 'flex', 
        flexDirection: 'column',
        height: '100%',
        overflow: 'hidden'
      }}
    >
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between',
        alignItems: 'center', 
        mb: 2, 
        pt: 2,
        borderBottom: '1px dashed',
        borderColor: 'primary.main',
        pb: 1
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <AssignmentIcon sx={{ color: 'primary.main', fontSize: '1.2rem', mr: 1 }} />
          <Typography variant="h6" sx={{ 
            fontWeight: 'medium', 
            color: 'primary.main',
            letterSpacing: '0.5px',
            textShadow: '0px 0px 1px rgba(156, 39, 176, 0.3)'
          }}>
            Meeting Notes
          </Typography>
        </Box>
        
        <Button
          variant="outlined"
          color="primary"
          size="small"
          startIcon={isGeneratingNotes ? <AutorenewIcon className="rotating" /> : <AssignmentIcon />}
          onClick={generateMeetingNotes}
          disabled={isGeneratingNotes}
          sx={{
            textTransform: 'none',
            borderRadius: '12px',
            py: 0.5,
            minWidth: 0,
            fontSize: '0.75rem'
          }}
        >
          {isGeneratingNotes ? 'Generating...' : 'Generate Notes'}
        </Button>
      </Box>
      
      <Box sx={{ flex: 1, overflow: 'auto' }}>
        {meetingNotes ? (
          <Box>
            <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="caption" sx={{ color: 'text.secondary', display: 'flex', alignItems: 'center' }}>
                <DoneIcon fontSize="inherit" sx={{ mr: 0.5, color: 'success.main' }} />
                {meetingNotesTimestamp && `Generated ${meetingNotesTimestamp.toLocaleString()}`}
              </Typography>
              <Box>
                <Chip 
                  label={meetingNotesGenInfo?.isAuto ? "Auto" : "Manual"} 
                  size="small" 
                  color={meetingNotesGenInfo?.isAuto ? "primary" : "secondary"} 
                  variant="outlined"
                  sx={{ height: 20, fontSize: '0.65rem', mr: 1 }}
                />
                {meetingNotesGenInfo?.isTranslated && (
                  <Chip 
                    label="Translated" 
                    size="small" 
                    color="info" 
                    variant="outlined"
                    sx={{ height: 20, fontSize: '0.65rem', mr: 1 }}
                  />
                )}
                <Tooltip title="Copy to clipboard">
                  <IconButton size="small" onClick={copyToClipboard} sx={{ mr: 0.5 }}>
                    <ContentCopyIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Export as Markdown">
                  <IconButton 
                    size="small" 
                    onClick={exportAsMarkdown}
                    disabled={isExporting}
                    sx={{ 
                      animation: isExporting ? 'pulse 1.5s infinite' : 'none',
                      '@keyframes pulse': {
                        '0%': { opacity: 1 },
                        '50%': { opacity: 0.3 },
                        '100%': { opacity: 1 }
                      }
                    }}
                  >
                    <DownloadIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
            </Box>
            <Box
              sx={{ 
                backgroundColor: 'rgba(0, 0, 0, 0.05)',
                p: 1.5,
                borderRadius: 1,
                fontSize: '0.85rem',
                lineHeight: 1.5,
                '& h1, & h2, & h3, & h4, & h5': {
                  margin: '16px 0 8px 0',
                  fontWeight: 'medium',
                  lineHeight: 1.2
                },
                '& h1': { fontSize: '1.3rem' },
                '& h2': { fontSize: '1.2rem' },
                '& h3': { fontSize: '1.1rem' },
                '& h4': { fontSize: '1rem' },
                '& h5': { fontSize: '0.9rem' },
                '& p': { margin: '8px 0' },
                '& ul, & ol': { paddingLeft: '20px', margin: '8px 0' },
                '& li': { margin: '4px 0' },
                '& blockquote': {
                  borderLeft: '3px solid',
                  borderColor: 'grey.400',
                  paddingLeft: '16px',
                  margin: '16px 0',
                  fontStyle: 'italic',
                  color: 'text.secondary'
                }
              }}
            >
              <ReactMarkdown>
                {meetingNotes}
              </ReactMarkdown>
            </Box>
            {!meetingNotesGenInfo?.isAuto && meetingNotesGenInfo?.username && (
              <Typography variant="caption" sx={{ display: 'block', mt: 1, textAlign: 'right', color: 'text.secondary' }}>
                Generated by {meetingNotesGenInfo.username}
              </Typography>
            )}
          </Box>
        ) : (
          <Box sx={{ 
            height: '100%', 
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'center', 
            alignItems: 'center',
            color: 'text.secondary',
            p: 2
          }}>
            <AssignmentIcon sx={{ mb: 1, fontSize: '2rem', opacity: 0.5 }} />
            <Typography variant="body2" sx={{ textAlign: 'center', mb: 1 }}>
              No meeting notes yet
            </Typography>
            <Typography variant="caption" sx={{ textAlign: 'center', opacity: 0.7 }}>
              Notes will auto-generate every 10 messages or click the button to generate now
            </Typography>
          </Box>
        )}
      </Box>
      
      {/* Success notification */}
      <Snackbar
        open={showSuccessAlert}
        autoHideDuration={3000}
        onClose={handleCloseAlert}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseAlert} severity="success" variant="filled" sx={{ width: '100%' }}>
          {successMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}

export default MeetingNotesPanel; 